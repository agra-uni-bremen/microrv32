package Core.Mem

import spinal.core._
import spinal.lib._
import spinal.sim._

//SpiltPoint is the size of the former mem, also the start point of later mem
class MemOriginal (WordWidth:Int, TotalSize:Int, SplitPoint:Int, InitContent:String) extends Component {
    //initializing MemOriginal
    val mem = new Mem(Bits(WordWidth bits), TotalSize) init(Seq.fill(TotalSize)(B(0, 32 bits)))
    mem.init(Tools.readmemh(InitContent))

    //Segment the memory
    //Assuming the data is in the backward of instruction
    val rom = Mem(Bits(WordWidth bits), SplitPoint)
    val ram = Mem(Bits(WordWidth bits), (TotalSize - SplitPoint))
    for (address <- 0 until SplitPoint) {
        rom(address) := mem(address)
    }
    for (address <- 0 until (TotalSize - SplitPoint)) {
        ram(address) := mem(SplitPoint + address)
    }

    //Print the specifications and content of the Inst and Data
    println("Memory wordwidth : " + WordWidth)
    println("Memory wordcount : " + TotalSize)
    println("Instruction memory wordcount : " + SplitPoint)
    println("Data memory wordcount : " + )

}

    